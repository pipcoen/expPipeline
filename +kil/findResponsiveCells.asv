function respondingCells = findResponsiveCells(blk,eventTimes,tWin)
%Assigning default values
if ~exist('tWin', 'var'); tWin = [-0.5 -0.1 0 0.5];
elseif numel(tWin)~=4; error('tWin should be 1x4 vector');
elseif ~all([(tWin(1:2)<=0) (tWin(3:4)>=0)]); error('pre/post windows should be negative/positive (or zero)');
end

if ~exist('eventTimes', 'var')
    switch blk.expDef
        case 'multiSpaceWorldPassive'
            eventTimes = [nanmean([blk.ephVisStimPeriodOnOff(:,1) blk.ephAudStimPeriodOnOff(:,1)],2); blk.ephRewardTimes];
            eventTimes = [eventTimes repmat(blk.sessionIdx,2,1)];
            eventTimes = eventTimes(~isnan(eventTimes(:,1)),:);
    end
elseif size(eventTimes,1) == 1; eventTimes = [eventTimes eventTimes*0+1];
end

%% Note: this looping is faster because it means smaller subsets are indexed when searching.
for i = unique(blk.ephSessionIdx)'
    selEvents = eventTimes(i == eventTimes(:,2));
    sessClust = unique(blk.ephClusterID(i == blk.ephSessionIdx));
    for j = selEvents'
        idx2Take = i == blk.ephSessionIdx & blk.ephSpikeTimes<(j+tWin(4)) & blk.ephSpikeTimes>(j+tWin(1));
        spikeTimes = blk.ephSpikeTimes(idx2Take)-j;
        clusterID = blk.ephClusterID(idx2Take);
        spikeCounts = cell2mat(arrayfun(@(x) [sum(x==clusterID(spikeTimes<tWin(2))) sum(x==clusterID(spikeTimes>tWin(3)))], sessClust, 'uni', 0));
        spikeRates = spikeCounts./[range(tWin(1:2)) range(tWin(3:4))];
    end
end
%Selecting unique clusters
sig = zeros(length(cluList),1);
%Testing for significance
relClusterTimes = arrayfun(@(x) spikeTimes(x==clusterID), cluList, 'uni', 0);
spikesBefore = arrayfun(@(x) clusterID(spikeTimes>tWin(1)+x & spikeTimes<tWin(2) + x), eventTimes, 'uni', 0);

for i = 1:length(cluList)
    sigSpikes = spikeTimes(clu == cluList(i));
    eventIndex = 1:length(eventTimes);
    allSpikes = arrayfun(@(x) sigSpikes(sigSpikes >= (eventTimes(x)-timePreUp) & sigSpikes <= (eventTimes(x)+timePostUp))-eventTimes(x), eventIndex, 'uni',0);
    preSpikes = cellfun(@(x) x(x <= 0 - timePreLow), allSpikes, 'uni',0);
    postSpikes = cellfun(@(x) x(x >= 0 - timePostLow), allSpikes, 'uni',0);
    preSpikeIdx = cellfun(@length, preSpikes)/(timePreUp-timePreLow);
    postSpikeIdx = cellfun(@length, postSpikes)/(timePostUp-timePostLow);
    z = ttest(postSpikeIdx, preSpikeIdx, 'alpha', 0.05/sqrt(length(cluList)));
    if z == 1; sig(i) = cluList(i); end
end
%Storing and sorting significant clusters
sig = sort(sig(sig~=0));
end



