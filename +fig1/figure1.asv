function figure1(specificPanels)
%% This function plots the data panels for figure one of the ms

%INPUTS(default values)
%specificPanels('fullFigure')---A string which can be used to specifiy specific panels to be plotted if you don't want to plot the whole figure.


if ~exist('specificPanels', 'var'); specificPanels = 'fullFigure'; end
specificPanels = lower(specificPanels);



if contains(specificPanels, {'b', 'fullfigure'})
    %%
    if ~exist('lerBlks', 'var'); lerBlks = spatialAnalysis('all', 'learning', 0, 0, ''); end
    figure;
    numRow = 1; numCol = 9;
    axesHandle = plt.tightSubplot (numRow,numCol,7:9,0.05,[0.1 0.1],[0.1 0.1]);
    set(gcf, 'position', get(gcf, 'position').*[2 1 0 0] + [0 0 numCol*150 450]);
    
    numMice = length(lerBlks.blks);
    numExp = 38; %hardcoded in prc.keyDates;
    expPer = arrayfun(@(x) permute(cell2mat(x.exp.performanceAVM),[3 1 2]), lerBlks.blks, 'uni', 0);
    performanceAVM = permute(cell2mat(expPer), [3 2 1]);
    
    stage4Exps = nan*ones(numMice, numExp);
    conflictsPresent = arrayfun(@(x) unique(x.tri.expRef(x.tri.trialClass.conflict)), lerBlks.blks, 'uni', 0);
    for i = 1:numMice; stage4Exps(i, conflictsPresent{i}) = 1; end
    expStage = squeeze(sum(~isnan(performanceAVM),1))' + ~isnan(stage4Exps);
    
    stage4Fraction = arrayfun(@(x) min(strfind(expStage(x,:)==4, [1 1 1])), 1:numMice)';
    for i = 1:numMice; stage4Fraction(i, conflictsPresent{i}) = 1; end

    plot(1:length(stage4Fraction), stage4Fraction)
    
           
    xlabel('Session number');
    ylabel('Performance (%)');
    hold on
    
    if ~exist('lerBlks', 'var'); lerBlks = spatialAnalysis('all', 'learning', 0, 0, ''); end
    currAx = getPanelAxes(specificPanels, 'b');
    xlabel('Session number');
    ylabel('Performance (%)');
    hold on
    
    numMice = length(lerBlks.blks);
    numExp = arrayfun(@(x) x.tot.experiments, lerBlks.blks);
    expPer = arrayfun(@(x) permute(cell2mat(x.exp.performanceAVM(1:min(numExp))),[3 1 2]), lerBlks.blks, 'uni', 0);
    performanceAVM = permute(cell2mat(expPer), [3 2 1]);
    
    performanceAVM > 60;
    
    mnMul = squeeze(nanmedian(performanceAVM(3,1:15,:),3));
    stMul = squeeze(mad(performanceAVM(3,1:15,:),[],3));
    plt.lineWithPatch(1:15,  [mnMul-stMul; mnMul; mnMul+stMul]);
end

if contains(specificPanels, {'c', 'fullfigure'})
    if ~exist('behBlks', 'var'); behBlks = spatialAnalysis('all', 'behavior', 0, 1); end
    currAx = getPanelAxes(specificPanels, 'c');
    xlabel('Contrast (%)');
    ylabel('Frac. Rightward Choices');
    hold on
    
    numMice = length(behBlks.blks);
    allParametersAV = cell2mat(arrayfun(@(x) x.exp.conditionParametersAV{1}, behBlks.blks, 'uni', 0));
    [uniParametersAV, ~, rowIdx] = unique(allParametersAV, 'rows');
    condFreq = histcounts(rowIdx,1:max(rowIdx)+1)';
    cond2Use = uniParametersAV(condFreq>=15,:);
    
    [visValues, audValues] = meshgrid(unique(cond2Use(:,2)),unique(cond2Use(:,1)));
    fracRightTurns = nan*ones([size(visValues), numMice]);
    for i = 1:numMice
        nBlk = spatialAnalysis.getBlockType(behBlks.blks(i), 'norm');
        grds = prc.getGridsFromBlock(nBlk);
        fracRightTurns(:,:,i) = arrayfun(@(x, y) max([nan grds.fracRightTurns(grds.visValues==x & grds.audValues==y)]),visValues,audValues);
    end
    
    meanData = nanmean(fracRightTurns,3);
    stdData = nanstd(fracRightTurns,[],3);
    numMicePerCond = sum(~isnan(fracRightTurns),3);
    
    plotData.fracRightTurns = meanData;
    plotData.visValues = visValues;
    plotData.audValues = audValues;
    plotData.fracRightTurnsLowBound = meanData-stdData./sqrt(numMicePerCond);
    plotData.fracRightTurnsHighBound = meanData+stdData./sqrt(numMicePerCond);
    
    plotOpt.lineStyle = '-';
    plotOpt.errorBars = 1;
    
    plt.fracitonRightChoiceData(plotData, plotOpt);
end

end


function panelAx = getPanelAxes(specificPanels, currentPanel)
    if ~strcmp(specificPanels, 'fullfigure'); figure; panelAx = gca; end
    figure; panelAx = gca;
end